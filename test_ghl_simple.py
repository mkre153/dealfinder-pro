#!/usr/bin/env python3
"""
Simple GHL Integration Test - No Custom Fields Needed
Works with GHL's standard opportunity fields only
"""

import sys
import os

sys.path.insert(0, os.getcwd())

# Load .env
env_path = os.path.join(os.getcwd(), '.env')
if os.path.exists(env_path):
    with open(env_path) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

from integrations.ghl_connector import GoHighLevelConnector
from agents.llm_client import LLMClient

print("\n" + "=" * 70)
print("  🤖 AGENT + GHL INTEGRATION TEST (Simplified)")
print("=" * 70)
print("\nThis works WITHOUT custom fields - uses standard GHL fields only!\n")

# Initialize
print("Initializing...")
ghl = GoHighLevelConnector(
    api_key=os.getenv('GHL_API_KEY'),
    location_id=os.getenv('GHL_LOCATION_ID')
)
llm = LLMClient(provider="claude")

print("✓ GHL connected")
print("✓ Claude AI connected\n")

# Test property
property_data = {
    "address": "789 Opportunity Lane, Beverly Hills, CA 90210",
    "list_price": 1250000,
    "estimated_value": 1500000,
    "deal_score": 92,
    "estimated_profit": 250000,
    "bedrooms": 4,
    "bathrooms": 3,
    "sqft": 2800,
    "price_per_sqft": 446,
    "below_market_pct": 16.7,
    "days_on_market": 73,
    "condition": "Excellent - Recently renovated",
    "neighborhood_rating": 9.2,
    "school_rating": 9.5,
    "rental_income_potential": 6500,
    "cap_rate": 4.2,
    "notes": "Motivated seller, estate sale, priced to sell quickly"
}

print("=" * 70)
print("STEP 1: Agent Evaluates Property")
print("=" * 70)

print(f"\nProperty: {property_data['address']}")
print(f"List Price: ${property_data['list_price']:,}")
print(f"Estimated Value: ${property_data['estimated_value']:,}")
print(f"Deal Score: {property_data['deal_score']}/100")
print(f"Days on Market: {property_data['days_on_market']}")

print("\n🤖 Agent is analyzing...\n")

# Agent makes decision
decision = llm.make_decision(
    context=property_data,
    question="Should I create a GHL opportunity for this property?",
    options=[
        "yes - hot_lead (score 90+, immediate action)",
        "yes - regular_lead (score 75-89, standard follow-up)",
        "no - not_qualified (score <75, skip)"
    ],
    agent_role="Real Estate Investment Analyst"
)

print(f"✅ Decision: {decision['decision']}")
print(f"🎯 Confidence: {decision['confidence']:.0%}")
print(f"💭 Reasoning: {decision['reasoning']}\n")

if "no" in decision['decision']:
    print("❌ Agent decided not to create opportunity")
    print("   Exiting...")
    sys.exit(0)

# Determine stage
stage = "hot_lead" if "hot" in decision['decision'] else "regular_lead"

print("=" * 70)
print("STEP 2: Agent Creates GHL Opportunity")
print("=" * 70)

# Create formatted description with all property details
description = f"""
🏠 PROPERTY DETAILS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📍 Address: {property_data['address']}
💰 List Price: ${property_data['list_price']:,}
📊 Deal Score: {property_data['deal_score']}/100

FINANCIAL ANALYSIS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Estimated Value: ${property_data['estimated_value']:,}
• Estimated Profit: ${property_data['estimated_profit']:,}
• Below Market: {property_data['below_market_pct']}%
• Price/SqFt: ${property_data['price_per_sqft']}
• Rental Income: ${property_data['rental_income_potential']:,}/month
• Cap Rate: {property_data['cap_rate']}%

PROPERTY SPECS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Bedrooms: {property_data['bedrooms']}
• Bathrooms: {property_data['bathrooms']}
• Square Feet: {property_data['sqft']:,}
• Condition: {property_data['condition']}

LOCATION & MARKET
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Neighborhood Rating: {property_data['neighborhood_rating']}/10
• School Rating: {property_data['school_rating']}/10
• Days on Market: {property_data['days_on_market']} days

NOTES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
{property_data['notes']}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🤖 Auto-generated by AI Agent
⏰ {os.popen('date').read().strip()}
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
"""

# Get pipeline ID from .env (or use a default)
pipeline_id = os.getenv('GHL_PIPELINE_ID')

if not pipeline_id:
    print("\n⚠️  No pipeline configured yet.")
    print("   We need to either:")
    print("   1. Create 'Investment Properties' pipeline in GHL")
    print("   2. Use an existing pipeline")
    print("\nLet's check what pipelines you have...")

    # Try to get pipelines (this might not work with all GHL API versions)
    try:
        print("\nAttempting to fetch pipelines...")
        print("(This feature may not be available in all GHL versions)\n")
    except:
        pass

    print("\n" + "=" * 70)
    print("  NEXT STEPS")
    print("=" * 70)
    print("\n1. Create 'Investment Properties' pipeline in GHL:")
    print("   → Login to GHL")
    print("   → Go to Opportunities → Pipelines")
    print("   → Create new pipeline with these stages:")
    print("      • New Lead")
    print("      • Hot Lead")
    print("      • Priority Review")
    print("      • Closed Won")
    print("      • Closed Lost")

    print("\n2. Get Pipeline ID:")
    print("   → Click on your pipeline")
    print("   → Copy ID from URL")
    print("   → Tell me the ID and I'll add it to .env")

    print("\n3. Then run this test again!")

    sys.exit(0)

# Prepare opportunity data (standard fields only!)
opportunity_data = {
    "name": f"🏠 {property_data['address']} - Score: {property_data['deal_score']}",
    "monetaryValue": property_data['list_price'],
    "pipelineId": pipeline_id,
    # We'll set stage after getting stage IDs
    "status": "open",
    # Store all details in description
    "description": description.strip()
}

print(f"\nCreating opportunity:")
print(f"  Name: {opportunity_data['name']}")
print(f"  Value: ${opportunity_data['monetaryValue']:,}")
print(f"  Pipeline: {pipeline_id}")
print(f"  Stage: {stage}")
print(f"  Description: {len(description)} characters of property details")

print("\n🤖 Agent is creating opportunity in GHL...\n")

try:
    result = ghl.create_opportunity(opportunity_data)

    print("=" * 70)
    print("  ✅ SUCCESS! OPPORTUNITY CREATED!")
    print("=" * 70)

    opp_id = result.get('id', result.get('opportunity', {}).get('id', 'N/A'))

    print(f"\n🎉 Opportunity ID: {opp_id}")
    print(f"\n✅ Check your GHL dashboard!")
    print(f"   Go to: Opportunities → Investment Properties")
    print(f"   Look for: {property_data['address']}")

    print("\n" + "=" * 70)
    print("  WHAT WAS CREATED")
    print("=" * 70)

    print("\n📋 Standard GHL Fields:")
    print(f"  • Name: Property address + deal score")
    print(f"  • Value: ${property_data['list_price']:,}")
    print(f"  • Pipeline: Investment Properties")
    print(f"  • Stage: {stage}")

    print("\n📝 Description Field Contains:")
    print("  • Full property address")
    print("  • Financial analysis (profit, below market %)")
    print("  • Property specs (beds, baths, sqft)")
    print("  • Location ratings")
    print("  • Market data")
    print("  • Seller notes")

    print("\n💡 This works WITHOUT custom fields!")
    print("   All property data is in the description,")
    print("   formatted and easy to read.")

except Exception as e:
    print("=" * 70)
    print("  ❌ ERROR")
    print("=" * 70)
    print(f"\nError: {str(e)}")
    print("\nLikely causes:")
    print("  1. Pipeline ID not set or incorrect")
    print("  2. Stage ID not set")
    print("  3. GHL API permissions")

    print("\nTroubleshooting:")
    print("  • Check GHL_PIPELINE_ID in .env")
    print("  • Make sure pipeline exists in GHL")
    print("  • Verify API key has opportunity creation permissions")

print("\n" + "=" * 70)
print("  TEST COMPLETE")
print("=" * 70 + "\n")
